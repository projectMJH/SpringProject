<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 
			보안 실행
			/member/login.do
															| permitAll
			user(client) =============== security 필터 ============> 서블릿 ============ HandlerMapping ====== Model ======== ViewResolver ======= JSP
											| web.xml				(DispatcherServlet)
										 FilterChain
										 
			/admin/admin.do				  403(접근 거부)							 
			user(client) =============== security 필터 ============> 서블릿
			 	|								|
			 	=================================
			 	
			1. application-datasource.xml
			   application-security.xml
			2. application-context.xml   
			
			.do => 접근이 가능한 권한을 등록
			/member/** permitAll
			/admin/**  hasRole('ROLE_ADMIN')
			/board/**  hasAnyRole('ROLE_ADMIN','ROLE_USER') 								 	
	 -->
	 <context:component-scan base-package="com.sist.*"/>
	 <!-- 페이지별 접근 권한 -->
	 <http auto-config="true" use-expressions="true">
	 <!-- 접근 권한 / 로그인 / 로그아웃 처리 spEL-->
	  <csrf disabled="true"/> <!-- 해킹 방지 (파밍) -->
	 <!-- 데이터베이스별 접근 권한 -->
	  <intercept-url pattern="/member/**" access="permitAll"/>
	  <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
	  <intercept-url pattern="/**" access="permitAll"/>
	  <intercept-url pattern="/member/login.do" access="permitAll"/>
	  <!-- 
	  	@GetMapping("member/login.do")
	  	public String member_login(HttpServletRequest resquest)
	  	{
	  		String username=request.getParameter("userid")
	  		return "redirect:main/main.do"
	  	}
	   -->
	  <form-login login-page="/member/login.do"
	  	login-processing-url="/member/login.do"
	  	username-parameter="userid"
	  	password-parameter="userpwd"
	  	default-target-url="/main/main.do"
	  	always-use-default-target="false"
	  	authentication-success-handler-ref="loginSuccessHandler"
	  	authentication-failure-handler-ref="loginFailureHandler"
	  />
	  <remember-me data-source-ref="ds" token-validity-seconds="86400"/> <!-- 하루유지 60*60*24 -->
	  <logout logout-url="/member/logout.do"
	  	invalidate-session="true"
	  	logout-success-url="/main/main.do"
	  	delete-cookies="remember-me,JSESSIONID"
	  />
	  <!-- 
	  	@GetMapping("member/logout.do")
	  	public String memver_logout(HttpSession session)
	  	{
	  		session.invalidate()
	  		cookie전체 삭제
	  		return "redirect:../main/main.do"
	  	}
	   -->
	 </http> 
	 <beans:bean id="loginSuccessHandler" class="com.sist.security.LoginSuccessHandler"/>
	 <beans:bean id="loginFailureHandler" class="com.sist.security.LoginFailureHandler">
	 	<beans:property name="defaultFailureUrl" value="/member/login.do?login_error"/>
	 </beans:bean>	
	 <!-- 데이터베이스 연동 : userService -->
	 <jdbc-user-service data-source-ref="ds"
	 	id="userService"
	 	users-by-username-query="SELECT userid as username,userpwd as password,enable FROM projectMember WHERE userid=?"
	 	authorities-by-username-query="SELECT userid as username,authority FROM authority WHERE userid=?"
	 />
     <!-- 인증관리자에 전송 -->
	 <authentication-manager>
	 	<authentication-provider user-service-ref="userService">
	 		<password-encoder ref="bcryptEncoder"/>
	 	</authentication-provider>
	 </authentication-manager>
	 <!-- 비밀번호 암호화 --> 
	 <beans:bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	 
</beans:beans>
