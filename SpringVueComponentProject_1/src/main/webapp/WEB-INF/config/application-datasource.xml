<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
    <!-- properties파일 읽기 -->
	<util:properties id="db" location="/WEB-INF/config/db.properties"/>
	<!-- 데이터베이스 정보 수집 : BasicDataSource -->
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource"
		p:driverClassName="#{db['driver']}"
		p:url="#{db['url']}"
		p:username="#{db['username']}"
		p:password="#{db['password']}"
	/>
	<!-- 
		maxActive 8
		maxIdle	  8
		maxWait	  10000
	 -->
	<tx:annotation-driven/>
	<!-- 
		@Transactional => AOP를 이용해서 처리
	 --> 
	 <bean id="transactionManager"
	 	class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
	 	p:dataSource-ref="ds"
	 />
	<!-- MyBatis로 전송 : SqlSessionFactoryBean -->
	<bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="ds"
		p:configLocation="/WEB-INF/config/Config.xml"
	/>
	<!-- SqlSessionFactoryBean을 이용해서 Mapper구현
		 모든 Mapper를 한번에 처리 <mybatis-spring>
		 Mapper를 한개씩 처리 <bean..>
	 -->
	 <mybatis-spring:scan base-package="com.sist.mapper"
	 	factory-ref="ssf"
	 />

</beans>
